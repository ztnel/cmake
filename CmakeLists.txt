cmake_minimum_required(VERSION 3.10)

# set the project name
project(Tutorial VERSION 1.0)
option(USE_MYMATH "Use tutorial provided math implementation" ON)
configure_file(TutorialConfig.h.in src/TutorialConfig.h)

if(USE_MYMATH)
  add_subdirectory(include)
  list(APPEND EXTRA_LIBS include)
endif()


# specify the C standard in project build
set(CMAKE_C_STANDARD 99)
set(CMAKE_C_STANDARD_REQUIRED True)

# add the executable
add_executable(Tutorial src/tutorial.c)
target_link_libraries(Tutorial PUBLIC ${EXTRA_LIBS})
target_include_directories(Tutorial PUBLIC "${PROJECT_BINARY_DIR}" "${PROJECT_BINARY_DIR}/src")
install(TARGETS Tutorial DESTINATION bin)
install(FILES "${PROJECT_BINARY_DIR}/src/TutorialConfig.h" DESTINATION include)

enable_testing()

# does the application run
add_test(NAME Runs COMMAND Tutorial 25)

# does the usage message work?
add_test(NAME Usage COMMAND Tutorial)
set_tests_properties(Usage
  PROPERTIES PASS_REGULAR_EXPRESSION "Usage:.*number"
  )

# define a function to simplify adding tests
function(do_test target arg result)
  add_test(NAME Comp${arg} COMMAND ${target} ${arg})
  set_tests_properties(Comp${arg}
    PROPERTIES PASS_REGULAR_EXPRESSION ${result}
    )
endfunction()

# do a bunch of result based tests
do_test(Tutorial 4 "4.0000 is 2.0000")
do_test(Tutorial 9 "9.0000 is 3.0000")
do_test(Tutorial 5 "5.0000 is 2.236")
do_test(Tutorial 7 "7.0000 is 2.645")
do_test(Tutorial 25 "25.0000 is 5.0000")
do_test(Tutorial -25 "-25.0000 is (-nan|nan|0)")
do_test(Tutorial 0.0001 "0.0001 is 0.01")